The Floyd-Warshall algorithm is a shortest path algorithm for graphs. Like the Bellman-Ford algorithm or the Dijkstra's algorithm, it computes the shortest path in a graph. However, Bellman-Ford and Dijkstra are both single-source, shortest-path algorithms. This means they only compute the shortest path from a single source. Floyd-Warshall, on the other hand, computes the shortest distances between every pair of vertices in the input graph.
The Floyd-Warshall algorithm is an example of dynamic programming. It breaks the problem down into smaller subproblems, then combines the answers to those subproblems to solve the big, initial problem. The idea is this: either the quickest path from A to C is the quickest path found so far from A to C, or it's the quickest path from A to B plus the quickest path from B to C.

Floyd-Warshall is extremely useful in networking, similar to solutions to the shortest path problem. However, it is more effective at managing multiple stops on the route because it can calculate the shortest paths between all relevant nodes. In fact, one run of Floyd-Warshall can give you all the information you need to know about a static network to optimize most types of paths. It is also useful in computing matrix inversions.

At the heart of Floyd-Warshall is this function:

\text{ShortestPath}(i, j, k).
ShortestPath(i,j,k).

This function returns the shortest path from AA to CC using the vertices from 1 to kk in the graph. The vertices are individually numbered {1, 2, ..., k}1,2,...,k.

There is a base case and a recursive case. The base case is that the shortest path is simply the weight of the edge connecting AA and C:C:

\text{ShortestPath}(i, j, 0) = \text{weight}(i, j).
ShortestPath(i,j,0)=weight(i,j).

The recursive case will take advantage of the dynamic programming nature of this problem. There are two possible answers for this function. Either the shortest path between ii and jj is the shortest known path, or it is the shortest known path from ii to some vertex (let's call it zz) plus the shortest known path from zz to j:j:

\text{ShortestPath}(i, j, k) = \text{min}\big(\text{ShortestPath}(i, j, k-1), \text{ShortestPath}(i, k, k-1) + \text{ShortestPath}(k, j, k-1)\big).
ShortestPath(i,j,k)=min(ShortestPath(i,j,k−1),ShortestPath(i,k,k−1)+ShortestPath(k,j,k−1)).
Basically, what this function setup is asking this: "Is the vertex kk an intermediate of our shortest path (any vertex in the path besides the first or the last)?"

If kk is not an intermediate vertex, then the shortest path from ii to jj using the vertices in \{1, 2, ..., k-1\}{1,2,...,k−1} is also the shortest path using the vertices in \{1, 2, ..., k\}.{1,2,...,k}.

If kk is an intermediate vertex, then the path can be broken down into two paths, each of which uses the vertices in \{1, 2, ..., k-1\}{1,2,...,k−1} to make a path that uses all vertices in \{1, 2, ..., k\}.{1,2,...,k}. That is because the vertex kk is the middle point. 



The Floyd-Warshall algorithm can be described by the following pseudo code:

Create a |V| x |V| matrix, M, that will describe the distances between vertices
For each cell (i, j) in M:
    if i == j:
        M[i][j] = 0
    if (i, j) is an edge in E:
        M[i][j] = weight(i, j)
    else:
        M[i][j] = infinity
for k from 1 to |V|:
    for i from 1 to |V|:
        for j from 1 to |V|:
            if M[i][j] > M[i][k] + M[k][j]:
                M[i][j] = M[i][k] + M[k][j]